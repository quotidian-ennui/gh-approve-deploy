#!/usr/bin/env bash
set -eo pipefail

GH_REST_API_VERSION="X-GitHub-Api-Version: 2022-11-28"
GH_ACCEPT="Accept: application/vnd.github+json"
LIST_TEMPLATE='{{tablerow "Status" "Workflow" "Branch"  "URL" "Started" -}}
{{ range . -}}
{{tablerow (.status | autocolor "green") (.workflowName | autocolor "yellow") (.headBranch) (.url | autocolor "cyan")  (timeago .startedAt) -}}
{{end -}}'

usage() {
  cat << EOF

Usage: gh approve-deploy -w "workflow-name"
  Required arguments
  -w  The workflow name

  Optional arguments:
  -b The branch name (default is the default branch)
  -c Comment for the approval (default is 'deploy it')
  -l list workflow runs in a 'waiting' state on the branch
  [-e the environment requiring approval. This parameter is ignored]

EXAMPLES
gh approve-deploy -w "deploy-to-prod"

EOF
 exit 1
}

function approval_payload() {
  printf "{\"environment_ids\": [%s], \"state\":\"approved\", \"comment\": \"$2\"}" "$1"
}

function gh_api() {
  gh api -H "$GH_REST_API_VERSION" -H "$GH_ACCEPT" "$@"
}

gh_repo=$(gh repo view --json "nameWithOwner" -q ".nameWithOwner") || true

if [[ "$gh_repo" == "" ]]; then
  echo "I don't appear to be in a repo that's attached to github..."
  usage
fi

environment=''
workflow_name=''
branch_name=''
comment=":shipit: deploy it"
list=''

while getopts 'e:w:b:c:lh' flag; do
    case "${flag}" in
    e) environment="${OPTARG}" ;;
    w) workflow_name="${OPTARG}" ;;
    b) branch_name="${OPTARG}" ;;
    c) comment="${OPTARG}" ;;
    l) list="true" ;;
    h) usage ;;
    *) usage ;;
    esac
done

if [[ -n "$environment" ]]; then
  echo "Ignoring -e parameter, will get the id from the pending_deployment"
fi

if [[ -n "${list}" ]]; then
  gh run list -s "waiting" --json "status,displayTitle,workflowName,headBranch,startedAt,url" -t "$LIST_TEMPLATE"
else
  if [[ -z "${workflow_name}" ]]; then
    echo "No Workflow specified"
    usage
  fi
  if [[ -z "$branch_name" ]]; then
    branch_name=$(gh_api /repos/:owner/:repo --jq '.default_branch')
  fi
  run_id=$(gh run list -b "$branch_name" --json "databaseId" -w "$workflow_name" -s "waiting" -q ".[].databaseId")
  target_env=$(gh_api repos/:owner/:repo/actions/runs/"$run_id"/pending_deployments | jq ".[].environment.id")
  approval_payload "$target_env" "$comment" | gh_api --silent --method POST repos/:owner/:repo/actions/runs/"$run_id"/pending_deployments --input -
fi